{"version":3,"file":"static/js/387.73179605.chunk.js","mappings":"+SAOO,SAAeA,EAAtB,iDAAO,OAAP,oBAAO,WAAkCC,EAASC,GAA3C,uFACkBC,EAAAA,EAAAA,IAAA,yBAA4BF,GAAW,CAC5DG,OAAQF,IAFL,cACCG,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAA6BC,EAAIN,GAAjC,uFACkBC,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,mBAAwC,CAC7DJ,OAAQF,IAFL,cACCG,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeG,EAAtB,iDAAO,OAAP,oBAAO,WAAiCD,EAAIN,GAArC,uFACkBC,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,2BAAgD,CACrEJ,OAAQF,IAFL,cACCG,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeI,EAAtB,iDAAO,OAAP,oBAAO,WAAoCF,EAAIN,GAAxC,uFACkBC,EAAAA,EAAAA,IAAA,gBACZK,EADY,kCAErB,CAAEJ,OAAQF,IAHP,cACCG,EADD,yBAKEA,EAASC,MALX,kEAOA,SAAeK,EAAtB,iDAAO,OAAP,oBAAO,WAAgCC,EAAaV,GAA7C,uFACkBC,EAAAA,EAAAA,IAAA,gEACoCS,GACzD,CAAER,OAAQF,IAHP,cACCG,EADD,yBAKEA,EAASC,MALX,kEAjCPH,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBU,QAAS,mC,2KCFEC,EAAOC,EAAAA,GAAAA,GAAH,6OAcJC,EAAOD,EAAAA,GAAAA,GAAH,oOAUJE,EAAaF,EAAAA,GAAAA,IAAH,sIAQVG,EAAWH,EAAAA,GAAAA,IAAH,6IASRI,EAAOJ,EAAAA,GAAAA,EAAH,mH,SCrCF,SAASK,IACtB,OAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAe,mCAAG,WAAML,GAAN,uFAEpBD,GAAa,GAFO,UAGDhB,EAAAA,EAAAA,IAAkBiB,EAASG,EAAWzB,QAHrC,OAGd4B,EAHc,OAIpBT,EAAaU,EAAkBD,EAAKE,OAJhB,gDAMpBC,QAAQC,IAAR,MANoB,yBAQpBX,GAAa,GARO,4EAAH,sDAYrB,OADAM,EAAgBL,GACT,kBAAMG,EAAWQ,OAAjB,CACR,GAAE,CAACX,IAEJ,IAAMO,EAAoB,SAAAK,GACxB,OAAOA,EACJC,KAAI,YACH,MAAO,CAAEC,UAD8D,EAAjEA,UACcC,UADmD,EAAtDA,UACcC,cADwC,EAA3CA,cACkBC,aADyB,EAA5BA,aACiBC,QADW,EAAdA,QAE1D,IACAC,MAAK,SAACC,EAAWC,GAAZ,OAA2BD,EAAUF,QAAUG,EAAWH,OAA1D,GACT,EAED,OACE,8BACGpB,GACC,SAACwB,EAAA,EAAD,KAEA,SAAClC,EAAD,UACGQ,GACCA,EAAUiB,KACR,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,UAAWC,EAAzB,EAAyBA,cAAeC,EAAxC,EAAwCA,aAAxC,OACE,UAAC3B,EAAD,YACE,SAACC,EAAD,CACEgC,IACEN,EAAY,0CAC2BA,GACnC,wEAENO,IAAKR,KAEP,UAACxB,EAAD,YACE,UAACC,EAAD,YACE,oCADF,IACsBuB,MAEtB,UAACvB,EAAD,YACE,yCADF,IAC2BqB,GAAwB,kBAd5CC,EADb,OAyBb,C","sources":["API/Api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: '388b8c32f7164678f9c3582a41e277c5',\n};\n\nexport async function fetchTrendingFilms(request, object) {\n  const response = await axios.get(`trending/movie/${request}`, {\n    signal: object,\n  });\n  return response.data;\n}\n\nexport async function fetchFilmById(id, object) {\n  const response = await axios.get(`movie/${id}?language=en-US`, {\n    signal: object,\n  });\n  return response.data;\n}\n\nexport async function fetchCastFilmById(id, object) {\n  const response = await axios.get(`movie/${id}/credits?language=en-US`, {\n    signal: object,\n  });\n  return response.data;\n}\n\nexport async function fetchReviewsFilmById(id, object) {\n  const response = await axios.get(\n    `movie/${id}/reviews?language=en-US&page=1`,\n    { signal: object }\n  );\n  return response.data;\n}\nexport async function fetchSearchMovie(SearchQuery, object) {\n  const response = await axios.get(\n    `search/movie?language=en-US&include_adult=false&query=${SearchQuery}`,\n    { signal: object }\n  );\n  return response.data;\n}\n","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    height: 400px;\n    overflow-y: scroll;\n\n    padding: 20px 10px;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    flex-wrap: wrap;\n\n    list-style: none;\n`\nexport const Item = styled.li`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid #123c4a;\n    border-radius: 4px;\n    flex-basis: calc((100% - 40px) / 5);\n`\n\nexport const ImageActor = styled.img`\n    display: block;\n    width: 150px;\n    height: auto;\n    object-fit: cover;\n    margin-bottom: 10px;\n `\n\nexport const TextWrap = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 10px;\n    color: #123c4a;\n `\n\n\nexport const Text = styled.p`\n    font-size: 14px;\n    margin: 0;\n\n    & > span {\n        font-weight: 600;\n    }\n `\n\n\n\n","import { fetchCastFilmById } from 'API/Api';\nimport { Loader } from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ImageActor, Item, List, Text, TextWrap } from './Cast.styled';\n\nexport default function Cast() {\n  const [castMovie, setCastMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const getCastFilmById = async movieId => {\n      try {\n        setIsLoading(true);\n        const resp = await fetchCastFilmById(movieId, controller.signal);\n        setCastMovie(selectKeysArrCast(resp.cast));\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCastFilmById(movieId);\n    return () => controller.abort()\n  }, [movieId]);\n\n  const selectKeysArrCast = arrCast => {\n    return arrCast\n      .map(({ character, credit_id, original_name, profile_path, cast_id }) => {\n        return { character, credit_id, original_name, profile_path, cast_id };\n      })\n      .sort((firstCast, secondCast) => firstCast.cast_id - secondCast.cast_id);\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <List>\n          {castMovie &&\n            castMovie.map(\n              ({ character, credit_id, original_name, profile_path }) => (\n                <Item key={credit_id}>\n                  <ImageActor\n                    src={\n                      profile_path\n                        ? `https://image.tmdb.org/t/p/w400/${profile_path}`\n                        : 'https://banffventureforum.com/wp-content/uploads/2019/08/No-Image.png'\n                    }\n                    alt={original_name}\n                  />\n                  <TextWrap>\n                    <Text>\n                      <span>Name:</span> {original_name}\n                    </Text>\n                    <Text>\n                      <span>Character:</span> {character ? character : 'unknown'}\n                    </Text>\n                  </TextWrap>\n                </Item>\n              )\n            )}\n        </List>\n      )}\n    </>\n  );\n};\n"],"names":["fetchTrendingFilms","request","object","axios","signal","response","data","fetchFilmById","id","fetchCastFilmById","fetchReviewsFilmById","fetchSearchMovie","SearchQuery","api_key","List","styled","Item","ImageActor","TextWrap","Text","Cast","useState","castMovie","setCastMovie","isLoading","setIsLoading","movieId","useParams","useEffect","controller","AbortController","getCastFilmById","resp","selectKeysArrCast","cast","console","log","abort","arrCast","map","character","credit_id","original_name","profile_path","cast_id","sort","firstCast","secondCast","Loader","src","alt"],"sourceRoot":""}